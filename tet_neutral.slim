/*
	Tuomas Hämälä, October 2023.
	SLiM 3 (v3.7) script for simulating genetic load in autotetraploids.
	The approach for simulating tetraploid individuals is based on a script by Peter Ralph and Ben Haller, available at: https://github.com/MesserLab/SLiM-Extras/blob/b8414fd182b4672a36ac2c0d7f6b58a7f66c6953/models/autotetraploid.slim
	Compared to the simple example above, this model starts the population as diploid and switches to autotetraploid by having some / all individuals go through a whole-genome duplication.
	Dominance (h) is calculated based on the selection coefficient (s) of each mutation following Huber et al. 2018 (Nat Comms).
	Fitness effects are defined using ploidy-independent dominance weight following Layman & Buch 2018 (Evolution).
	
	In this model, all mutations are neutral and tetraploids don't go through a founding bottleneck.
*/

initialize() {
	initializeSLiMModelType("nonWF");
	
	defineConstant("K", 9184); // carrying capacity
	defineConstant("L", 1e5); // total bp length
	defineGlobal("NEXT_TAG", 0);  // used to provide unique values
	
	initializeMutationType("m0", 0.5, "f", 0); // neutral mutations
	m0.convertToSubstitution = T;
	m0.mutationStackPolicy = "f";
	
	initializeGenomicElementType("g1", m0, 1);
	initializeGenomicElement(g1, 0, L - 1);
	initializeMutationRate(1.39e-07);
	initializeRecombinationRate(5.6e-07);
}

// reproduction for diploids
1:91839 reproduction(p1){
	mate = p1.sampleIndividuals(1); // choose a random mate
	b1 = sim.chromosome.drawBreakpoints(); // breakpoints between maternal chromosomes
	b2 = sim.chromosome.drawBreakpoints(); // breakpoints between paternal chromosomes
	p1.addRecombinant(genome1, genome2, b1, mate.genome1, mate.genome2, b2);
}

// set up a diploid population
1 early(){
	sim.addSubpop("p1", K);
	sim.tag = 0;
	defineConstant("simID", getSeed());
}

// fitness scaling
early() {
	p1.fitnessScaling = K / p1.individualCount;
}

91839 late(){
	sim.addSubpop("p2",0);
}

// switch to autotetraploidy is achieved by cloning individuals from p1 to p2
91840 reproduction(p1){
	for(k in seqLen(p1.individualCount)){
		duplicate = p2.addCloned(p1.individuals[k]);
		tag = NEXT_TAG;
		defineGlobal("NEXT_TAG", NEXT_TAG + 1);
		p1.individuals[k].tagF = tag;
		duplicate.tagF = tag;
		p1.individuals[k].tag = k;
	}
	self.active = 0; // code is only ran once
}

// reproduction for tetraploids
91841: reproduction(p1){
	mate = p1.sampleIndividuals(1); // choose a random mate
	ma_chroms = c(individual.genomes, p2.individuals[individual.tag].genomes); // 4 maternal chromosomes
	pa_chroms = c(mate.genomes, p2.individuals[mate.tag].genomes); // 4 paternal chromosomes
	
	ma_order = sample(seqLen(4), 4); // set up random chromosome pairing
	pa_order = sample(seqLen(4), 4);
	
	b1 = sim.chromosome.drawBreakpoints(); // breakpoints between first 2 maternal chromosomes
	b2 = sim.chromosome.drawBreakpoints(); // breakpoints between first 2 paternal chromosomes
	diploid1 = p1.addRecombinant(ma_chroms[ma_order[0]], ma_chroms[ma_order[1]], b1, pa_chroms[pa_order[0]], pa_chroms[pa_order[1]], b2); // add recombination events to the offspring genome 1
	
	b1 = sim.chromosome.drawBreakpoints(); // breakpoints between second 2 maternal chromosomes
	b2 = sim.chromosome.drawBreakpoints(); // breakpoints between second 2 paternal chromosomes
	diploid2 = p2.addRecombinant(ma_chroms[ma_order[2]], ma_chroms[ma_order[3]], b1, pa_chroms[pa_order[2]], pa_chroms[pa_order[3]], b2); // add recombination events to the offspring genome 2
		
	tag = NEXT_TAG; // set up a tag to identify the two genomes
	defineGlobal("NEXT_TAG", NEXT_TAG + 1);
	diploid1.tagF = tag;
	diploid2.tagF = tag;
}

91841: early(){
	// initialize tags for new inds
	inds = p1.individuals[p1.individuals.age == 0];
	others = p2.individuals[p2.individuals.age == 0];
	idx = match(inds.tagF, others.tagF);
	inds.tag = others.index[idx];
	
	// mark no-longer-alive p2 individuals for death
	inds = p1.individuals;
	alive = rep(0.0, p2.individualCount);
	alive[inds.tag] = 1.0;
	p2.individuals.fitnessScaling = alive;
	// update tags to reflect this; note the update must be deferred
	// until after mortality, so that tags are correct in fitness()
	// note we are assuming that death won't rearrange their relative orders
	tag_map = asInteger(cumSum(alive) - 1);
	for(ind in inds)
		ind.setValue("newTag", tag_map[ind.tag]);
}


91841: late() {
	// do the deferred tag update now that mortality has occurred
	// note additional individuals might have died due to selection and
	// density-dependent fitness; they will be cleaned up next tick
	inds = p1.individuals;
	newTags = inds.getValue("newTag");
	inds.tag = newTags;
}

1:141840 late(){
	if(sim.generation % 500 != 0 & sim.generation != 81840 & sim.generation != 91840)
		return;
	gen = sim.generation - 91840;
	if(sim.generation < 81840){
		catn("Generation "+gen);
		return;
	}
	else{
		if(sim.generation < 91840){
			ploidy = 2;
			pi = estPi(ploidy);
		}
		else{ // print output for tetraploids	
			ploidy = 4;
			pi = estPi(ploidy);
		}
		catn("Generation "+gen+", Ploidy = "+ploidy+", N = "+p1.individualCount+", pi = "+pi);
		if(sim.tag == 0){
			writeFile("/users/tuomaham/kage/slim/neutral/tet_neutral_"+simID+".txt",paste("gen n ploidy pi"));
			sim.tag = 1;
		}
		writeFile("/users/tuomaham/kage/slim/neutral/tet_neutral_"+simID+".txt",paste(gen+" "+p1.individualCount+" "+ploidy+" "+pi), append=T);
	}
}

// function for calculating diversity statistics
function (float)estPi(integer ploidy){
	if(ploidy == 4)
		inds = c(p1.individuals, p2.individuals[p1.individuals.tag]);
	else
		inds = p1.individuals;
	neut_freq = inds.genomes.mutationFrequenciesInGenomes(sim.mutationsOfType(m0));
	pi = 2 * sum(neut_freq * (1 - neut_freq)) / L;
	return pi;
}
